Introduction:

This artifact contains the Coq source files for the paper "Reasoning about External Calls"

coqc version 8.18.0 is required to compile the proofs.

Note: Since this artifact was written, Coq has subsequently renamed to Rocq. This artifact
may compile using subsequent versions of Coq or Rocq, but this has not been confirmed.

Getting Started:

Confirm that the correct version of Coq is installed.
coqc --version

Compilation can be performed by executing:
            make
in the root folder.

An html index of the Coq model is built in ./html
To view open ./html/toc.html in a browser

The artifact is structured as follows:

    * common.v
      Some common definitions used across the entire model/proofs


    * language_def.v
      The core syntax definitions of the underlying language (Section 3.1) along with
      the assertion (Section 4) and specification (Section 5) syntax


    * subst.v
      Substitution is defined using the Subst type class.


    * operational_semantics.v
      The operational semantics (Section 3.2) of the underlying language's statements
      and expressions


    * assert_theory.v
      The assertion definition of the consequence relation, along with several assumed
      properties. eg. consequence transitivity, typing of fields, etc 


    * hoare.v
      The syntactic rules for the Hoare logic. This includes both the Hoare triple rules
      (Section 6.1), and the quadruple rules (Section 6).


    * spec.v
      The definition of the module Specification rules in Section 6.3 


    * shop.v
      Definitions related to setting up the Shop example from Appendix


    * assumptions.v
      Most of the assumptions made in the construction of the proof. These are varied,
      but are largely about the assumed, underlying Hoare logic (eg. the standard Hoare
      rule for assignment), or the assumed proof system for assertion consequence.


    * shop_lemmas.v
      Supporting lemmas for the proof of the Shop example.

    * shop_proof.v
      The proofs that Shop satisfies S2 (Lemma I2) and S3 (Lemma I3)

Extending this artifact:

There are three primary ways that the Chainmail model in this artifact might
be extended:
   1) writing new proofs using the Chainmail proof system:
      * In order to construct new proofs using the proof system, the
        program being verified needs to be constructed in the manner
        of the Shop: see shop.v
      * Supporting lemmas might need to be written: see shop_lemmas.v
      * Finally, proofs similar to those in shop_proof.v

   2) extending the assertion language/Hoare logic/specification language
      * The assertion syntax can be extended with new forms by extending
        the asrt definition in language_def.v
      * The assertion semantics are defined and provided in assert.v (but are
        not needed for this artifact). New assertion forms can be given new
        semantics by extending the sat definition
      * The Hoare logic rules are given in hoare.v. New rules can be added
        to either the triple or quadruple definitions here.
      * The Specification proof rules are defined in spec.v. Extensions
        to the specification rules need to be added here.

   3) extending the underlying language that the proof system is built upon
      * the syntax of the underyling language may be extended to add new
        forms by extending the various relevant definitions in language_def.v.
        Note, language_def.v also contains definitions for assertions and
        module specifications toward the end of the file.
      * the operational semantics of the underlying language and related definitions
        can be found in operational_semantics.v. Any new extensions to the
        underlying language would likely require extensions to the operational
        semantics.









TODO:
Assumptions:
  Paper assumptions -> Parameter
  Coq assumptions -> 
Document each file with an introduction paragraph
in particular:
    hoare.v
    shop_proof.v
    shop_lemmas.v
    assumptions.v <-----------