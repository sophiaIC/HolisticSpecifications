TODOS as of Ovotber 2021


LINDSEY's comments

l226-227.  "We call assertion A as encapsulated" needs to be turned into better English.
done?

???
l257.  You use \phi to refer to a sequence of frames, and then to a single frame!  Which is it?
done - Julian

??
l262.  Execution does not have this format!  What you want to say is that execution/semantics is defined in terms of expressions of that form.  it is also the *semantics* that has unsurprising and small-step, not actual executions.


DONE-SD

l263.  The statements in the continuation of the top frame are *not* currently being executed - they are waiting to be executed, as you said at l258.  The statements in the top from are the ones that will be executed next.

DONE-SD

l267.  Again it is not the semantics that have the form shown here.  The semantics is defined in expressions of the form show, which is not the same thing!\sigma
done - julian

???

l271.  a n -> an n
DONE-SD

l277.  This can be expressed more concisely: "The function classOf(\sigma, x) returns the class of ...".  You don't need to tell me that classOf is used in the definition - I can see that!
DONE-SD

ll281-296.  Are all of these versions really possible?  As I understand it, executions involve calls from the external module to the internal one, so I don't see how you can just swap the internal and external. modules as you do between (b) and (c).  Maybe I'm taking this too literally, but I'm struggling to understand this external state semantics, and this adds to the confusion.
DONE-SD

ll304&310.  In Def 3.2, you have  which has not been defined or explained, but is presumably meant to be the transitive closure of the \wigglyarrow relation defined in Def 3.1 - and is explained as such at l310.  But this is not necessary, as the relation in Def 3.1 is already a multiple step relation.
?? do noit understand, do not agree -S
Julian: I think Lindsay is incorrect here.

l306.  Again, you don't need to tell me that you used $Initial$ - can see that - just tell me what it means.
DONE-SD

ll306-309.  You should also phrase this in terms of what an initial state is ("this initial state contains", "the stack consists", "whose continuation is"), not "should" or "may be".   Making this more concise will also bring the explanation of \wigglyarrow^* closer to where it is used - as it is I was wondering why you hadn't explained it long before I got to the explanation!
DONE-SD

It would also help here to point out that \wigglyarrow^* means zero or more of the steps defined in Def 3.1, each of which may involve many internal steps.
DONE?-SD thinks so

l310.   We -> we

l310.  You haven't used the term "reduction" before, so I have to guess that it refers to a step as defined in Def 3.
DONE-SD

l313.  You hyphenate "class-based" elsewhere.
DONE-SD

l314.  This says that classes may be annotated as "enclosed", but Appendix A (l1478) says that modules may be annotated as "inside" or "boundary".  Make sure these are consistent.
DONE - Julian
I think you should say something about what enclosed means and why you use it.
l317.  This says the type system prohibits calls from internal objects to external objects.  I don't understand how this works - are modules marked as internal and external?  how are any calls between modules permitted?  
This also appears to be inconsistent with Appendix A (l1477), which says that "calls may not be made to external, non-module methods" - though I don't know what a non-module method is.
l319.  it's -> its  (twice)

**** OPEN, NO ANSWER YET ********
l325.  Why do you want to express security concepts?  You have not said previously that this work is about security!  And in any case, why do you want these particular security concepts?

l334.  You don't need to tell me again that Def 3.3 gives the syntax - you've already said that!
DONE-SD

l338.  Are internal and external absolute properties? Or are they relative to the current module?
DONE-SD

l334-345.  The definition of the semantics of $Basic^{spec}$ makes use -> The definition make use
The previous sentence make it clear that you are talking about the definition of the semantics of $Basic^{Spec}$, so youy don't need to repeat it.
DONE-SD


l371-375.  I don't understand the definition of calls.  
It is stated n terms of \sigma.contn, which is not defined anywhere (including the Appendix), but appears to be the continuation.
If so, this seems to be saying that x calls y.m(...) is true exactly when x is the currently executing object (this) and its continuation has a single statement which is the call y.m(...).
I had expected, from the earlier explanation (l339) that x calls y.m(...) would be true if x contained a call on y.m anywhere, and that this would be true irrespective of whether x was currently executing.
This needs some explanation!
	f

Looking at this again later (in the context of the example at l470) it seems that perhaps x calls y.m(...) in a particular state if in that state the current object calls y.m.  If so, this should be made clear when you introduce this notation.
DONE-SD -- very important

l382.  I don't know what it means to say that a proof system is *indicated* by a judgement.  "indicated" seems like  strange word to use here.
same.  What is the judgement M |- A supposed to express?


l383.  There is no Theorem 3.2 in the paper!
DONE-SD

l383-384.  The sentence "We will not define such a judgement ..." is unnecessarily verbose, and rather cumbersome.  Why not just say that you assume a judgement ... - and tell me what it means.
DONE?-SD

l387.  all all -> all
l387.  What is the judgement M |= A intended to mean?  Is it related to M, \sigma |= A (def 3.4) somehow?
>> SD thinks that was clear in the text; no action

ll389&393.  First you say that wrapped is useful shorthand; then you say that it is critical.  Which is it?
done - julian

l393.  I don't understand "the conditions under which necessitates" - something's wrong here!
done? - Julian: this is gone, probably rewritten at some point

ll396-397.  How does the module being secure come into this discussion?  You haven't talked about security, or said what it means for a module to be secure.
done? - julian: disappeared

l400.  The first sentence (Necessity^spec extends ... with novel .) is incomplete.
done or removed

l400.  Dwf -> Def
done

l401.  I would not call these operators.  They are forms of expression/assertion.
julian: hmmm, I think we discussed this already

l404.  e.g. -> E.g.   It's a new sentence.
done

l404-405.  What does this assertion look like?  How do you express the condition that some external object has access to the password?


l409.  e.g. -> E.g.   It's a new sentence.
done


l409-410.  What does this assertion look like?  How do you express the condition that the execution step effecting the change from A1 to A2 is a call on transfer?  (See comment above about explanation - or rather lack of explanation - of x calls y.m(...).)
done

l413.  e.g. -> E.g.   It's a new sentence.
done

l417.  Delete "Necessity Specifications".  Or maybe enclose in brackets of commas if it is there to name these kinds of assertions.
done.

l422.  You have just describe four kinds of necessity specifications, so it doesn't make sense to then say "All three ...".
done 

And you should say "All three forms ..." if you are going to say this.
done

l429.  What is the notation introduced in Def 3.9 supposed to express?  I'm not going to even try to wrap my mind around all that notation without some kind of intuition to help me out!
done - thanks sophia

ll432-433.  This is broken!
done

l435.  "assertions A, A1, A2, and A" - notice something odd here??
done

l452-454.  This needs some explanation.
julian: I think this is pretty clear now with the description appearing directly above the definition


l461-465.  Just stating these without any explanation or justification isn't really very helpful.
done now that these are moved to 3.5.1

l466.  Undefined xref.
done

ll479-472&475-477.  Again, I don't understand why it is sufficient that there is *some* object that calls a.transfer or a.set -  but perhaps the definition of calls means that o must be the currently executing object.  But if that is the case, and because you know that there must be a currently executing object, why not just write this.external \land this calls M?  This really does need some explanation!  I have looked at it and thought about it several times no, and I still can't understand it! 
Julian: i think this is maybe not an issue now that there is more explanation of calls. 

I'm not sure what to make of these examples, given your earlier comments about stating necessity properties independently of the API!


l486-487.  You should point out that you are treating this as a total correctness assertion, whereas Hoare only addressed partial correctness, in which the assertion only guarantees that, providing P holds initially, C will not terminate in a state where Q does not hold.
julian: we removed this passage


l492&506.  Is is not merely an intuition that extends to Necessity Specifications. These are mathematical results which you can prove rigorously in terms if the semantics - provided that they really are true.
julian: removed

l492.  all three necessity specifications -> all three forms of necessity specification. 
julian: removed

ll493-494.  What do you consider as left-side and right-side here?  More interestingly, are you able to weaken or strength the final condition (the one that comes after onlyIf or onlyThrough)?  This is an important point to make!  Oh, ok - you get to this eventually - it would be good to make the point earlier!  See later comments.
julian:removed

l498.  Put a space after "(a)".
julian: removed

ll498-499.  You have two conditions in tt font, then the third in math italic.
julian: removed

ll505-509.  I don't understand why you treat A2 as left-hand side and A as right-hand side.  A2 is an assertion about the final state, while A is an assertion about the initial state.  This needs explanation!
Looking at this again, I'm not sure that left-hand side and right-hand side are helpful terms to use.  Why not stick to talking about pre- and postconditions, as you have done before?  After all, that is the way the Law of Consequence in Hoare logic which you allude to is stated: you can strengthen preconditions and weaken postconditions.
julian:removed

ll510-524.  What is the point of this extension?  This needs some explanation/motivation - as it is, it's isolated and doesn't connect to anything, so I don't know why it is there.
Without any explanation, I am not going to try to understand the formalism.
done


l532.  display -> displayed
done

l535.  Delete the colon after "et al".
done

l546.  What is odd about "... in Figure 2.  In Fig. 2 .."?
done: fig 2 removed

ll547-560.  In Fig 2, assuming that Node(n,x) creates a node with n as its parent, the code on the left does not match the diagram on the right.  The code describes a linear tree when each node is the sole descendant of the previous one - and is not consistent with the following text.
done: fig 2 removed


l566-569.  I think it would be nicer to express this as: the property of a node can only change if either ...
This is easier to understand, and gets across the idea of this being a necessary condition better, rather than paraphrasing the formalism.
I think similar comments apply to other places you say things like this - and certainly to the next example.
done

l574.  Add space before "[".
done

l609.  uing -> using
done


================================
TODOs
8 October:

1. Clarify the purpose of "enclosed" and the type system for the proof system. 
Julian todo, and others to read. 
Done - Julian (I have changed the text in Section 3.1 to reflect what enclosed and the type system do. I have not propogated this across the document. Will do when others agree)

2. cut back Safe example. remove incorrect version
Done - Julian

3. Make the words in 2.4 match the headings in Sec 4 & 5
Done - Julian

5. Move repetitive rules in figs 4, 5, 6 to appendix
Done - Julian

4. Make new drawing of Fig 1 & 2
done - Julian

--------------------------
as discussed on 5th October

0) In the intro, say that we have been inspired by Chainmail's approach to add the capability operators, but simplified it, removed he temporal iperators and instead introduced necessity operators. And that this simolification allowed us to develop a proof logic
Done - Susan
1) rename Lang^{00} to Loo^{typed}. In sect 3.1 say that L^{typed} is a typed version on Loo; types are there to prove encapsulation
Done - Julian

2) In 3.2 say that Basic^spec is a subset of Chainmail specs
done - Susan

3) add to Fig, 1 and Fig. 2 that they were taken from FASE
done - Susan

4) Replace \NecessitySpecification by the appropriate wording
Done  - Susan

5) section 2.1, JML, say that all variables are universally quantified
Done - Susan

6) use Permission, rather than Access in the intro -- ie make consistent with rest
done - Susan

7) add an example of |> 
done - Julian

8) read everything

9) expand section 2.4 witg examples exopressed in Necessity

Sophia will start with 8., and if time allows, will do 9

Susan will do 3) and 4)

Juian will do the rest

We will be on email.

-----
from before the 5th October

FOR THE CURRENT SUBMISSION

** 1. refer to similarities with FASE? eg all of section 3.1. and 3.2, and most of appendix, and bith diagrams. Say that the external steps diagram was taken from FASE?        
done

** 2. Section 1 talks of Access, Provenance and Call, while section 3 talks of Permission, Provenance and Control; need to update section 1 and through the paper 

** 3. Where do we say that fields are private? Add that the PL is sequential?
Done (Julian: added to top of section 3.1)

** 5. Does section 3.5 look at _all_ the examples from FASE?
done - Julian

** 4. Do we need both terms module-internal and encapsulated? More importantly, which assertions are not encapsulated?
Julian: currently "module-internal" is only used in one paragraph on page 3. 
I think this might be a better term than encapsulated as it avoids mixups with other definitions of encapsulated. 
Maybe "module-encapsulated"?

* 5. Explain the difference between Mod3 and the one used in section 5. In particular, Ledger makes it more interesting.
Done (Julian)
a) Explain at what point the proof of Mod3 and the one in section 5 would be the same.                                             
B) Make a diagram for Mod3 and the one from BankMl -- we have got such diagrams. 
c) Rename BankMdl to Mod4?
DONE (Julian)

* 6. Say in Section 2.4 that we do not ever look inside the method bodies -- except in Step 1.
Done (Julian)

* 7. Make the organization of the proof in 5 reflect  the order in section 2.4

** 8. Do methods have return types? Make consistent
Done (Julian: I think so. I at least did this across section 5)

* 9. Terminology
     a) replace Necessity by something less broad and ambitious, ie
               Necessity-centered; or even Capabilities-Centered 
     b) capitalization of \NecessitySpecification
done? (Julian: I think Susan has done this?)

* 10. In section 4, and in Section 6, use the terms from Part1-Part4 in section 2, as they are more succinct, and thus more descriptive   (Julian: I've added this to Section 4)

* 11. Is the rule of consequence "substructural"

* 12. The last 8 lines in section 3.1 come a bit unmotivated, What is the type system for?
Done (Julian)

* 13. Explain what |> does in Def. 3.7. Give some example
Done (Julian)

** 14. In the intro we do not mention the to1-step versions -- mention that there are more?
    Alternatively, 14 a (*) do what SD wrote in the email  about illustrating the appriach

* 15. Add some illustrative examples in sections 3-4

* 16. rename "to1" as it cannot easily be distinguished from "to". Perhaps call is "imm" for "immediatlety" or			(Julian: how about "next", or is this too similar to Chainmail?)
 "iTo" ?
 done - Julian
 
* 17. rename all internal/external modules that are M_1 and M_2 to M and M'.
Done (Julian: I think so. A simple ctrl-f doesn't pick any more up)

** 18. add to related work -- or even to intro -- the work by Dimoulas
https://dl.acm.org/doi/pdf/10.1145/2983990.2984021
(note that Dimoulas is on the RC for OOPSLA)


If we have time, 

T1. some of the Conclusion should go to earlier

T2. Add some examples before we hit section 6

T3. Show the example of something that is not encapsulated


THINGS FOR FURTHER WORK

1. express VerX in Chainspec

2. Fund whether some of the rules in section 4 can be omitted

3. Study completeness
                         

OLD TODOS 6. Lemma 3.5 has problems, as we said                                                       ============== julian --- done, ... I think
7. Check that ocurrences of SpecX and SpecW are correct                                     ============== julian --- done
8. Improve motivation for Def. 3.6, and give some example (again, perhaps FASE has got this)============== julian --- done, I added some bank acc related examples, and tried to talk it up a bit. not sure if it's enough tho
9. Lemma 3.9 has two problems; fix, and turn into a Def, or an Axiom; EXPLAIN that we _assume_ the existence of the algorithmic system ========== julian --- done
10.Section 3.5 -- is that clear as is?                                                      ============== julian
11. ?? Add diagram for DAO from FASE?
12. Sophia to read section 4. in particular, there is no $C$ for code as in the Hoare triples  ========= SOPHIA did, others please read



16. Make sure we say about fields being protected, and say also at which point this is important  -------------- kjx
17. Make sure we way that we do not have calls from internal to external, and also say also at which point this is important -------------- kjx
18. Do we explain anywhere why a.balance=val is encapsulated? -------------- kjx



If we have time, 
T1. some of the Conclusion should go to earlier
T2. Add some examplesbefore we hit section 5
T3. Show the example of something that is not encapsulated
