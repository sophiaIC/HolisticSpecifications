TODOs for 2022

1) emergent behaviour
Add the words:  
"no single procedure call is capable of breaking the necessity specification, but a sequence of calls can very well be".  
To the intro
> move page 2?
- Julian
DONE

2) Use the longer explanations from O1 (from the rebuttal) for the into or for section 2
We had said
> Move the clarifying examples from section 3.4.1 to Section 2 (between 2.3 & 2.4?)
> will use the discussion from O1 in section 2
- Sophia

2A) explain that S_necessaity2 does not preclude others from having access to the password, nevertheless provided guarantees for scopes which do not have access to the password
% as from the discussion at WG2.3
- Sophia
 
3) Give better names to the specs and the modules
Eg
NecessityBankSpec_d could be S_{next_decr_if_calls}
And
NecessityBankSpec_c could be S_{fut_decr_if_calls}

And
Mod1 could be Mod_{rob_simple}
Mod2 could be Mod_{careless}
Mod3 could be Mod_{rob_cmpl}

4) Give better names to modules

5) Talk about the complexity   for external calls from related work
(As in rebuttal) 
(in 2.3 or/and conclusion?)

6) Novelty -- O2.B in rebuttal
(related work?)
(also add novelty across the introduction)
"crucial realization that chainmail's temporal operators were very expressive, but would 
have made the proof system significantly more complex without being fully needed to express
the practical examples that were studied (???). "
"We looked for a sweet spot between expressivity & the ability to prove examples"
- Julian
DONE by Sophia

7) Adaptation 
A) finish story, and use the intro from rebuttal, eg
> The specification on lines 416-417 talks about three different program states. That specification only makes sense if variable a denotes the same object in all three states, even though it is possible that in these states the contents of the variable  a
has changed (eg through an assignment of the form  ...)

- James

8) Say why access is not deep
% where?
put in description of access after def. 3.4

9) add rebuttal's comments on assertion encapsulation
> copy from rebuttal

10) make the order of M, M' the same in all judgments.
(Propose M'*M, and Arising(M',M)

11) Explain why the restriction on return values is sufficient in If1-Inside
% promised in rebuttal
(add discussion of If1-Inside to the discussion of external calls)
- Julian
DONE (Some one check the wording on this. L719)

12) replace section 5 with the original simpler bank account example
- Julian

13) explain why we do not need constructors 
> The example does not provide any interface to allow 
> someone to get the correct password, or at least 
> initialize the password. 
add to description of TooL (Section 3)
 
 
 14) change "stronger" wrt S_robust1 vs S_robust2.
 >   S_robust1 is not a subset of S_robust2.
 >   figure out better wording for paragraph 
 >   after the statement of (S_robust2)
 - Julian
 DONE
 
 15) make macros for spec & module names
 - Julian
 DONE
