TODOs for 2022

1) emergent behaviour
Add the words:  
"no single procedure call is capable of breaking the necessity specification, but a sequence of calls can very well be".  
To the intro
> move page 2?
- Julian
DONE

2) Use the longer explanations from O1 (from the rebuttal) for the into or for section 2
We had said
> Move the clarifying examples from section 3.4.1 to Section 2 (between 2.3 & 2.4?)
> will use the discussion from O1 in section 2
- DONE Sophia

2A) explain that S_necessaity2 does not preclude others from having access to the password, nevertheless provided guarantees for scopes which do not have access to the password
% as from the discussion at WG2.3
- DONE Sophia
 
3) Give better names to the specs and the modules
Eg
NecessityBankSpec_d could be S_{next_decr_if_calls}
And
NecessityBankSpec_c could be S_{fut_decr_if_calls}

DONE Sophia
TODO - check section 5


4) Give better names to modules

DONE   -- Sophia
TODO -- check Section 5

5) Talk about the complexity   for external calls from related work
(As in rebuttal -- we have a great argument, and new references there! 
(in 2.3 or/and conclusion?)

MUST

6) Novelty -- O2.B in rebuttal
(related work?)
(also add novelty across the introduction)
"crucial realization that chainmail's temporal operators were very expressive, but would 
have made the proof system significantly more complex without being fully needed to express
the practical examples that were studied (???). "
"We looked for a sweet spot between expressivity & the ability to prove examples"
- Julian
DONE by Sophia

7) Adaptation 
A) finish story, and use the intro from rebuttal, eg
> The specification on lines 416-417 talks about three different program states. That specification only makes sense if variable a denotes the same object in all three states, even though it is possible that in these states the contents of the variable  a
has changed (eg through an assignment of the form  ...)

-  DONE by James
 - DONE by Sophia

7a) add a diagram for adaptation, that a) changes the heap, b) changes the var map, c) requires fresh variables

DONE by Sophia

8) Say why access is not deep
% where?
put in description of access after def. 3.4
>> use stuff from rebuttal! <<

MUST

9) add rebuttal's comments on assertion encapsulation
> copy from rebuttal; add references!

MUST

10) make the order of M, M' the same in all judgments.
(Propose M'*M, and Arising(M',M)

DONE -- Sophia

11) Explain why the restriction on return values is sufficient in If1-Inside
% promised in rebuttal
(add discussion of If1-Inside to the discussion of external calls)
- Julian
DONE (Some one check the wording on this. L719)

12) replace section 5 with the original simpler bank account example
- Julian

MUST
URGENT?

13) explain why we do not need constructors 
> The example does not provide any interface to allow 
> someone to get the correct password, or at least 
> initialize the password. 
add to description of TooL (Section 3)

-- Perhaps unnecessary, as we show initialization in section 2 already (Sophia_
????

 
 14) change "stronger" wrt S_robust1 vs S_robust2.
 >   S_robust1 is not a subset of S_robust2.
 >   figure out better wording for paragraph 
 >   after the statement of (S_robust2)
 - Julian
 DONE
REVISITED by Sophia
 
 15) make macros for spec & module names
 - Julian
 DONE

16) rewrite the abstract once we have settled the intro

DONE first approach by Sophia; ALL please revisit

17) Do we talk about the VerX encodings? Do we add them to the paper?
????

18) deal with password initialization in Mod_good

DONE Sophia -- all please check

19) deal with JML - in particular frame conditions, our description is pre 2000's
MUST

20) can we increase the font in listings?

21) Can we have a caligraphic S that looks like an S (rather than mathbb?)

?? Do not like outcome :-(

22) revisit and expand section 3.4

DONE, but check 

23) mention Adam Chippala's library when we talk about Coq
>> as in rebuttal

24)  Ensure consistent usage of Section vs. section
MUST


25) code in intro?

26) Section 5 to match the rest

URGENT
