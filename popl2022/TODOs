TODOs

FOR THE CURRENT SUBMISSION

** 1. refer to similarities with FASE? eg all of section 3.1. and 3.2, and most of appendix, and bith diagrams. Say that the external steps diagram was taken from FASE?        

** 2. Section 1 talks of Access, Provenance and Call, while section 3 talks of Permission, Provenance and Control; need to update section 1 and through the paper 

** 3. Where do we say that fields are private? Add that the PL is sequential?     

** 5. Does section 3.5 look at _all_ the examples from FASE?

** 4. Do we need both terms module-internal and encapsulated? More importantly, which assertions are not encapsulated?

* 5. Explain the difference between Mod3 and the one used in section 5. In particular, Ledger makes it more interesting. 
a) Explain at what point the proof of Mod3 and the one in section 5 would be the same.
B) Make a diagram for Mod3 and the one from BankMl -- we have got such diagrams. 
c) Rename BankMdl to Mod4? 

* 6. Say in Section 2.4 that we do not ever look inside the method bodies -- except in Step 1.

* 7. Make the organization of the proof in 5 reflect  the order in section 2.4

** 8. Do methods have return types? Make consistent

* 9. Terminology
     a) replace Necessity by something less broad and ambitious, ie
               Necessity-centered; or even Capabilities-Centered 
     b) capitalization of \NecessitySpecification

* 10. In section 4, and in Section 6, use the terms from Part1-Part4 in section 2, as they are more succinct, and thus more descriptive

* 11. Is the rule of consequence "substructural"

* 12. The last 8 lines in section 3.1 come a bit unmotivated, What is the type system for?

* 13. Explain what |> does in Def. 3.7. Give some example

** 14. In the intro we do not mention the to1-step versions -- mention that there are more?
    Alternatively, 14 a (*) do what SD wrote in the email  about illustrating the appriach

* 15. Add some illustrative examples in sections 3-4

* 16. rename "to1" as it cannot easily be distinguished from "to". Perhaps call is "imm" for "immediatlety" or
 "iTo" ?
 
* 17. rename all internal/external modules that are M_1 and M_2 to M and M'.

If we have time, 

T1. some of the Conclusion should go to earlier

T2. Add some examples before we hit section 6

T3. Show the example of something that is not encapsulated


THINGS FOR FURTHER WORK

1. express VerX in Chainspec

2. Fund whether some of the rules in section 4 can be omitted

3. Study completeness
                         

OLD TODOS 6. Lemma 3.5 has problems, as we said                                                       ============== julian --- done, ... I think
7. Check that ocurrences of SpecX and SpecW are correct                                     ============== julian --- done
8. Improve motivation for Def. 3.6, and give some example (again, perhaps FASE has got this)============== julian --- done, I added some bank acc related examples, and tried to talk it up a bit. not sure if it's enough tho
9. Lemma 3.9 has two problems; fix, and turn into a Def, or an Axiom; EXPLAIN that we _assume_ the existence of the algorithmic system ========== julian --- done
10.Section 3.5 -- is that clear as is?                                                      ============== julian
11. ?? Add diagram for DAO from FASE?
12. Sophia to read section 4. in particular, there is no $C$ for code as in the Hoare triples  ========= SOPHIA did, others please read



16. Make sure we say about fields being protected, and say also at which point this is important  -------------- kjx
17. Make sure we way that we do not have calls from internal to external, and also say also at which point this is important -------------- kjx
18. Do we explain anywhere why a.balance=val is encapsulated? -------------- kjx



If we have time, 
T1. some of the Conclusion should go to earlier
T2. Add some examplesbefore we hit section 5
T3. Show the example of something that is not encapsulated
