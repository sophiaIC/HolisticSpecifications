We are delighted that all reviewers found the problem significant, and
that the paper resonates with RA’s experience. In spite of 20+ years of
research into the safety of object-capability systems, a general
approach to verifying object-capability programs has remained elusive
until now.  Because object-capability programs run in an unconstrained
“open world”, we consider a model that captures how these programs
control access to capabilities, and the guarantees programs can (or
cannot) rely on, is particularly timely. We are committed to improving
the paper’s presentation to clarify our approach as much as we can.

In the improved version, we will:

* Expand Section 2 to better explain scoped invariants (RA), and
  illustrate the Hoare logic proving external calls (RC). We will
  ensure that all terms are explained before use -- either with an
  explicit definition, or in context of an example -- including terms
  such as path, frame, access, external state, current call, step,
  reachable object, reachable state, and pointer semantics.

* Provide more examples and motivation e.g. discuss how reasoning
  about access allows us to reason about internal fields; motivate the
  need for the guarantee/invariant part of the quadruples; discuss
  alternative designs for “protection”; and bring in examples from the
  appendix to explain applicability of our approach.

* All reviewers have highlighted points where the paper could give
  more explanations. We are very grateful for those suggestions, which
  will guide us to clarify and improve the paper. Regarding concerns
  about the case study: The Shop was carefully designed to include a
  range of ocap-related features: public and private methods, methods
  with calls, with internal calls or two external calls,
  if-statements, and methods that check for capabilities. While
  minimal, Shop is characteristic of a whole family of programs where
  effects are tamed by capabilities. We are happy to study examples
  proposed by the reviewers.

* We are confident we can assuage most of the concerns of reviews RA
  and RC. The concerns of RB are less applicable to our work: Namely,
  they pertain 1) to the number and choice of the programming language
  features, and 2) the (surmised) lack of applicability to polymorphic
  calls. Wrt 1): papers about novel approaches to program verification
  (see e.g. references in the submitted paper) typically adopt a tiny
  programming language to concentrate on novel contributions (e.g.
  the Hoare logic) rather than well-understood language features. Wrt
  2): Our logic does, indeed, support reasoning about polymorphic
  calls, details later in this response.
  
* That said: we will endeavour to make the paper more self contained
  and easier to follow. Most changes involve exchanging material
  between the main paper and the appendices, or adding explanations,
  making the changes straightforward to implement. Given the extra 2
  pages permitted for revisions, we are confident that we can fit the
  extra material, and if need be, we can move the proof of soundness
  to an appendix (RC).
