* Introduction:

This artifact contains the Coq source files for the paper "Reasoning about External Calls".
The definitions and proofs included in this artifact provide a working example of the application
of the proof system in the associated paper. Specifically, we encode a simple example of
a Shop that uses an account with a key, and allows for safe and robust interactions with
external objects.

* Hardware Dependencies:
Desktop pc.

* Software requirements:

coqc version 8.18.0 is required to compile the proofs.

Note: Since this artifact was written, Coq has subsequently renamed to Rocq. This artifact
may compile using subsequent versions of Coq or Rocq, but this has not been confirmed.

* Getting Started:

1)
Confirm that the correct version of Coq is installed. This can be done by executing the following:
           coqc --version
We recommend using opam to manage your coq version.

2) 
Compilation of the proofs can be performed by executing:
            make
in the root folder.

* Step by Step Instructions

To confirm the results of the artifact, compilation of the proofs is all that is needed, along
with reading the proofs to ensure that the definitions and proofs accurately follow those in the
paper. For this reason we provide a description of the provided source files.

For ease of following the proofs in a more user friendly environment, an html index of the Coq model
is built in ./html. If you prefer using a browser to view the definitions/proofs, open ./html/toc.html
in a browser.

In order to fully understand the proofs in this artifact, we have included the appendix H from the paper
with the artifact. Appendix H includes the paper version of the proof of the Shop example.

The artifact is structured as follows:

    * common.v
      Some common definitions used across the entire model/proofs


    * language_def.v
      The core syntax definitions of the underlying language (Section 3.1) along with
      the assertion (Section 4) and specification (Section 5) syntax


    * subst.v
      Substitution is defined using the Subst type class.


    * operational_semantics.v
      The operational semantics (Section 3.2) of the underlying language's statements
      and expressions


    * assert.v
      The semantics of assertion satisfaction. This file is not necessary for evaluating
      the artifact.


    * assert_theory.v
      The assertion definition of the consequence relation, along with several assumed
      properties. eg. consequence transitivity, typing of fields, etc 


    * hoare.v
      The syntactic rules for the Hoare logic. This includes both the Hoare triple rules
      (Section 6.1), and the quadruple rules (Section 6).


    * spec.v
      The definition of the module Specification rules in Section 6.3


    * chainmail_lemmas.v
      Some supporting lemmas for constructing Chainmail proofs.


    * shop.v
      Definitions related to setting up the Shop example from Appendix


    * assumptions.v
      Most of the assumptions made in the construction of the proof. These are varied,
      but are largely about the assumed, underlying Hoare logic (eg. the standard Hoare
      rule for assignment), or the assumed proof system for assertion consequence.


    * shop_lemmas.v
      Supporting lemmas for the proof of the Shop example.

    * shop_proof.v
      The proofs that Shop satisfies S2 (Lemma H2) and S3 (Lemma H7)

Reusability Guide/Extending this artifact:

There are three primary ways that the Chainmail model in this artifact might
be extended:
   1) writing new proofs using the Chainmail proof system:
      * In order to construct new proofs using the proof system, the
        program being verified needs to be constructed in the manner
        of the Shop: see shop.v
      * Supporting lemmas might need to be written: see shop_lemmas.v
      * Finally, proofs similar to those in shop_proof.v

   2) extending the assertion language/Hoare logic/specification language
      * The assertion syntax can be extended with new forms by extending
        the asrt definition in language_def.v
      * The assertion semantics are defined and provided in assert.v (but are
        not needed for this artifact). New assertion forms can be given new
        semantics by extending the sat definition
      * The Hoare logic rules are given in hoare.v. New rules can be added
        to either the triple or quadruple definitions here.
      * The Specification proof rules are defined in spec.v. Extensions
        to the specification rules need to be added here.

   3) extending the underlying language that the proof system is built upon
      * the syntax of the underyling language may be extended to add new
        forms by extending the various relevant definitions in language_def.v.
        Note, language_def.v also contains definitions for assertions and
        module specifications toward the end of the file.
      * the operational semantics of the underlying language and related definitions
        can be found in operational_semantics.v. Any new extensions to the
        underlying language would likely require extensions to the operational
        semantics.