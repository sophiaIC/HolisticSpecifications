Dear James Noble, 

It is our pleasure to inform you that your paper: 

Holistic Specifications for Robust Programs 

has been accepted for presentation at FASE 2020. 

The reviews for your paper can be found at the end of this message. Please note that you are required to take into account the changes suggested by reviewers. 

The deadline for the camera-ready version is February 22nd. We will provide more details on the process for submitting the camera-ready version later on. Make sure your paper stays within the strict page limits (depending on the paper type).


Best regards, 

Heike and Jordi
FASE 2020 PC Chairs

SUBMISSION: 68
TITLE: Holistic Specifications for Robust Programs


----------------------- REVIEW 1 ---------------------
SUBMISSION: 68
TITLE: Holistic Specifications for Robust Programs
AUTHORS: Susan Eisenbach, Sophia Drossopoulou, James Noble and Julian Mackay

----------- Overall evaluation -----------
This work proposes a language to specify robustness of programs with
respect to ghost components that may potentially pose security risks to
the programs.
This is an interesting work which made a step towards the verification
of programs with respect to unpredicted attacks. The paper is well
written and easy to understand.
At the meantime, the drawback of this work is also about the attacks,
that is the attack behavior, i.e., the M’ which models other components
or the environment, is not well defined. For example, what does M’ look
like; does M’ need to be a program or can M’ be formula. In the
examples given in the paper, the attacker is simply ghost functions,
which is very limited in reality. The real-world attack can behave
maliciously in various ways and thus M’ may not be a program or a
function all the time. Thus, it raises the concern that the application
of this language can be difficult in analyzing robustness of programs
in real-world.
In addition, it would be interesting to see algorithms that use the
language to reason about robustness, which is currently missing.
Some unclear parts in the paper are listed as follows:
1. In solving a challenge in the temporal operations, this work
considers configurations arise from the initial to the current.
The concern is that if the environment (i.e., M’) is very
complicated (e.g., with infinite non-deterministic actions), even
considering configurations backwards (from initial to current),
the possible executions can be infinite, and thus the challenge
may still be there.
2. Formula (3) at page 5, how does the formula capture that “the
access is not leaked”. Is some relation between o and o’ missing
in the formula?
3. Lemma 1 is not intuitive to understand, especially why it is
correct. A proof sketch can be good.

4. The formula intital (..) also deserves some more explanations.
5. The concept of implicit frame is confusing.
6. It would be good if there are some examples for Time when it
first appears.
Minor issues:
1. Loo-&gt;\mathcal{L}_{oo} page 15
2. m.y or y.m ? page 7
3. The notation &lt;A in S&gt; is only becoming clear later. It is better
to explain it early when it appears the first time
4. In Definition 6 and Definition 7, S is a variable. However, S has
been used as a set throughout the paper.
5. Xdenotes -&gt; x denotes page 13



----------------------- REVIEW 2 ---------------------
SUBMISSION: 68
TITLE: Holistic Specifications for Robust Programs
AUTHORS: Susan Eisenbach, Sophia Drossopoulou, James Noble and Julian Mackay

----------- Overall evaluation -----------
This paper presents the language Chainmail to specify programs in an open world setting. The authors argue that in an open world, programs can interact with untrusted external code, and therefore, standard functional specifications are not sufficient. With Chainmail, necessary conditions can be written to ensure correctness of the internal components. In the paper, the design and the formal model of Chainmail is explained. Furthermore, they evaluated their language and mechanized the core in Coq. 

Strengths
+ Formal model of specification language
+ Detailed discussion of related work

Weaknesses
- Rely heavily on the appendix
- Very short description of the evaluation
- Several spelling and formatting errors

On the positive side, the authors motivated the need of a holistic specification language and created a formal model of this language. They derived the language features from a list of case studies and explained the features understandably.
The authors discussed other approaches to specify or verify object capabilities in detail. They discuss approaches that rely on the closed world assumption, and approaches that support the open world.  The authors state as an advantage that users of their approach only need to understand first order logic and some additional operators to write the necessary specifications.
On the negative side, the authors rely heavily on the appendix in their paper. Source code of the examples, some definitions, and the evaluation are moved to the appendix. This disturbs while reading the paper. For example, to reason about the three requirements on page 4, source code or additional information is needed. Maybe a journal paper offers the necessary space.
The evaluation is not self-contained in the paper. The examples are only presented in the appendix. The interesting part how the authors derived their language design from the examples is not explained but claimed in the paper. The authors does not discuss the design as stated in the introduction.
The paper starts with a motivation that most language mechanisms cannot ensure robustness against external code. The language Chainmail facilitates the writing of these robustness conditions, and it has a concept to check that conditions holds, but it does not ensure that all necessary conditions are established. That needs to be made more explicit.
The paper has several spelling and formatting mistakes that reduce the impression of the paper. The mistakes will be listed in the minor comments below.

Minor comments:
Page 3, The sentences after Permission, Control, etc, should stop with a period.
Page 3, Section  2 gives -> Section 2 gives
Page 3, makeNewAccount or makeAccount?
Page 4, The method makeNewAccount changes the balance of an account. Therefore, the first requirement is not correct, as it states that only deposit changes the balance.
Page 4, We need to (2) to avoid -> We need (2) to avoid
Page 4, “We can express these requirements through Chainmail assertions.” Can you explain why for example JML class invariants are not sufficient?
Page 4, “formal rule of (2)”, Can only clients change the balance of an account? What about the accounts themselves?
Page 7, Aaccess is not -> Access is not
Page 7, x calls m.y(zs) -> x calls y.m(zs)
Page 7, <(\exists o.<o access a4>) in S1> -> <(\exists o.<o access 94>) in S1>
Page 7, fuel[3] -> fuel [3]
Page 9, Loo,, -> Loo,
Page 9, definitions to Appendix A, -> definitions to Appendix A.
Page 10, c.f. Figure 4. -> c.f. Figure 4 in Appendix ?.
Page 11, In this section -> In this section,
Page 12, and variablex -> and variable x
Page 12, to those from a give set S. -> to those from a given set S.
Page 13, configurartion xdenotes -> configuration x denotes
Page 13, auxiliary concept: [Symbol]. Here, the comma and the symbol overlap
Page 15, there should be text between heading 6 and 6.1
Page 15, Defintion 1,2,3,4,5,6,7,8,9 and 10 -> Definitions 1-10
Page 15, properties of the loo language (Loo should be written as before)
Page 18, “calls”, “access”, “in” -> \emph instead of quotation marks?
Page 18, In this paper we -> In this paper, we



----------------------- REVIEW 3 ---------------------
SUBMISSION: 68
TITLE: Holistic Specifications for Robust Programs
AUTHORS: Susan Eisenbach, Sophia Drossopoulou, James Noble and Julian Mackay

----------- Overall evaluation -----------
Summary

This paper provides a specification approach to give specifications for open systems, i.e. specifications that describe how the component may evolve over time, and what sort of behaviours are allowed/are not allowed. A specification language is proposed and formalised. The specification language is reduced to a minimal set of useful constructs. Usability of the approach is shown on several examples.

General comments

Positive:
nice explanations of the idea
gradual build-up of the ideas and formalisation
useful contribution

Negative:
the real world examples are discussed very briefly

Overall, I feel very positive about this paper. The ideas are well-explained and the paper is carefully build up. In essence, the paper describes a way to give class-level temporal specifications, and it argues very well why this is useful.
I think there are a few points that could be improved further:

- I am still not sure why an open world setting requires an untyped language.
- How reasonable are your assumptions about fields being private, and addresses being unforgeable?
- A big challenge is (as always) how do you know which properties to specify? It would be nice to discuss this point a bit more, i.e. how difficult is it to come up with the right ChainMail specifications, and how do you guarantee they are sufficient to guarantee robustness?
- It is a pity that Section 6 is so short. I would recommend to shorten the related work section a bit (not reducing the number of papers discussed, but some could probably be discussed a bit less extensive), and add a bit more information on your real world cases that inspired you. This would make the paper even more interesting.

Detailed comments
abstract: in the closed world setting -> in a closed world setting
Can you add one sentence to your abstract why sufficient conditions are not enough in an open world setting?
p4: to (2) to
p6: appendix C Fig 6 -> this looks a bit awkward, maybe write something like 'in Appendix C (Fig 6)' (this occurs multiple times)
p7: object 94 -> at first I got very confused about this. I realised later that you introduced this on the previous page, but it might be good to refer back to it anyway.
fuel[3] -> fuel [3]
p8: not ever: never
p10: last sentence before Fig 3: why is the text green?
p13: xdenotes -> x denotes
p16: Shulte -> Schulte
p17: Swasey et al [21] -> This is an incorrect reference
Devriese have -> Devriese et al. have
(and here there should be a reference to [21])

